openapi: 3.0.3
info:
  title: Scene Graph API
  description: Core scene graph management and evaluation API
  version: 1.0.0
servers:
  - url: /api/v1
    description: Development server
paths:
  /scenes:
    post:
      summary: Create a new scene
      operationId: createScene
      tags:
        - scenes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSceneRequest'
      responses:
        '201':
          description: Scene created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Scene with this ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List all scenes
      operationId: listScenes
      tags:
        - scenes
      responses:
        '200':
          description: List of scenes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SceneSummary'
  /scenes/{sceneId}:
    get:
      summary: Get scene details
      operationId: getScene
      tags:
        - scenes
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scene details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneResponse'
        '404':
          description: Scene not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update scene
      operationId: updateScene
      tags:
        - scenes
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSceneRequest'
      responses:
        '200':
          description: Scene updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Scene not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete scene
      operationId: deleteScene
      tags:
        - scenes
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Scene deleted successfully
        '404':
          description: Scene not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /scenes/{sceneId}/nodes:
    post:
      summary: Add node to scene
      operationId: addNode
      tags:
        - nodes
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /scenes/{sceneId}/evaluate:
    post:
      summary: Evaluate scene at specific time
      operationId: evaluateScene
      tags:
        - evaluation
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateSceneRequest'
      responses:
        '200':
          description: Scene evaluation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateSceneResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Scene not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /color/spaces:
    get:
      summary: Get supported color spaces
      operationId: getColorSpaces
      tags:
        - color
      responses:
        '200':
          description: List of supported color spaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorSpacesResponse'
  /color/convert:
    post:
      summary: Convert color between color spaces
      operationId: convertColorSpace
      tags:
        - color
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertColorRequest'
      responses:
        '200':
          description: Converted color
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertColorResponse'
        '400':
          description: Invalid color or color space
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /color/transform:
    post:
      summary: Apply color transformation to scene nodes
      operationId: applyColorTransformation
      tags:
        - color
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColorTransformRequest'
      responses:
        '200':
          description: Color transformation applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorTransformResponse'
        '400':
          description: Invalid transformation parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Scene or node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CreateSceneRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        duration:
          type: integer
          minimum: 1
          maximum: 3600000
          default: 10000
        frameRate:
          type: number
          minimum: 1
          maximum: 120
          default: 60
    UpdateSceneRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        duration:
          type: integer
          minimum: 1
          maximum: 3600000
        frameRate:
          type: number
          minimum: 1
          maximum: 120
    SceneResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
        frameRate:
          type: number
        rootNode:
          $ref: '#/components/schemas/NodeResponse'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SceneSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        duration:
          type: integer
        frameRate:
          type: number
        createdAt:
          type: string
          format: date-time
    CreateNodeRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [rectangle, ellipse, text, image, composition, effect]
        transform:
          $ref: '#/components/schemas/Transform2D'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PropertyValue'
        parentId:
          type: string
          format: uuid
    NodeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        transform:
          $ref: '#/components/schemas/Transform2D'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PropertyValue'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NodeResponse'
        parentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    Transform2D:
      type: object
      properties:
        x:
          type: number
          minimum: -10000
          maximum: 10000
          default: 0
        y:
          type: number
          minimum: -10000
          maximum: 10000
          default: 0
        scale:
          type: number
          minimum: 0.001
          maximum: 1000
          default: 1
        rotation:
          type: number
          minimum: -360
          maximum: 360
          default: 0
        opacity:
          type: number
          minimum: 0
          maximum: 1
          default: 1
    PropertyValue:
      type: object
      properties:
        keyframes:
          type: array
          items:
            $ref: '#/components/schemas/Keyframe'
        currentValue:
          description: Current interpolated value
    Keyframe:
      type: object
      required:
        - time
        - value
      properties:
        time:
          type: integer
          minimum: 0
          maximum: 3600000
        value:
          description: Keyframe value (type depends on property)
        easing:
          type: string
          enum: [linear, easeIn, easeOut, easeInOut, bezier]
          default: linear
        easingParams:
          type: object
          description: Parameters for easing function
    EvaluateSceneRequest:
      type: object
      required:
        - time
      properties:
        time:
          type: integer
          minimum: 0
          maximum: 3600000
        options:
          type: object
          properties:
            includeMetadata:
              type: boolean
              default: false
            cacheEnabled:
              type: boolean
              default: true
    EvaluateSceneResponse:
      type: object
      properties:
        frameData:
          type: object
          description: Rendered frame data
        metadata:
          type: object
          properties:
            evaluationTimeMs:
              type: number
            nodeCount:
              type: integer
            cacheHitRate:
              type: number
        errors:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - error
        - message

    # Color system schemas
    ColorSpace:
      type: string
      enum:
        - sRGB
        - Linear
        - P3
        - Rec709
        - Rec2020
      description: Supported color spaces for professional color management

    Color:
      type: object
      properties:
        r:
          type: number
          minimum: 0
          maximum: 1
          description: Red component (0-1 range)
        g:
          type: number
          minimum: 0
          maximum: 1
          description: Green component (0-1 range)
        b:
          type: number
          minimum: 0
          maximum: 1
          description: Blue component (0-1 range)
        a:
          type: number
          minimum: 0
          maximum: 1
          description: Alpha component (0-1 range)
        colorSpace:
          $ref: '#/components/schemas/ColorSpace'
          description: Color space of this color
        gamma:
          type: number
          minimum: 0.1
          maximum: 5.0
          description: Gamma correction value
      required:
        - r
        - g
        - b
        - colorSpace

    ColorMatrix:
      type: object
      properties:
        matrix:
          type: array
          items:
            type: array
            items:
              type: number
          minItems: 3
          maxItems: 4
          description: 3x3 or 4x4 color transformation matrix
        offset:
          type: array
          items:
            type: number
          minItems: 3
          maxItems: 4
          description: Translation offset vector
      required:
        - matrix

    ColorTransformType:
      type: string
      enum:
        - gamma_correction
        - color_matrix
        - color_space_conversion
        - brightness_contrast
        - hue_saturation
        - levels
        - curves
      description: Type of color transformation to apply

    ColorTransformParams:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ColorTransformType'
        gamma:
          type: number
          description: Gamma value for gamma correction (1.0 = no correction)
        matrix:
          $ref: '#/components/schemas/ColorMatrix'
          description: Color transformation matrix
        fromSpace:
          $ref: '#/components/schemas/ColorSpace'
          description: Source color space for conversion
        toSpace:
          $ref: '#/components/schemas/ColorSpace'
          description: Target color space for conversion
        brightness:
          type: number
          minimum: -100
          maximum: 100
          description: Brightness adjustment (-100 to 100)
        contrast:
          type: number
          minimum: -100
          maximum: 100
          description: Contrast adjustment (-100 to 100)
        hue:
          type: number
          minimum: -180
          maximum: 180
          description: Hue shift (-180 to 180 degrees)
        saturation:
          type: number
          minimum: -100
          maximum: 100
          description: Saturation adjustment (-100 to 100)
        levels:
          type: object
          properties:
            inputBlack:
              type: number
              minimum: 0
              maximum: 255
            inputWhite:
              type: number
              minimum: 0
              maximum: 255
            outputBlack:
              type: number
              minimum: 0
              maximum: 255
            outputWhite:
              type: number
              minimum: 0
              maximum: 255
          description: Levels adjustment parameters
        curves:
          type: object
          properties:
            red:
              type: array
              items:
                type: array
                items:
                  type: number
              description: Red channel curve points [input, output]
            green:
              type: array
              items:
                type: array
                items:
                  type: number
              description: Green channel curve points [input, output]
            blue:
              type: array
              items:
                type: array
                items:
                  type: number
              description: Blue channel curve points [input, output]
          description: RGB curves adjustment
      required:
        - type

    ColorSpacesResponse:
      type: object
      properties:
        colorSpaces:
          type: array
          items:
            $ref: '#/components/schemas/ColorSpace'
        defaultColorSpace:
          $ref: '#/components/schemas/ColorSpace'
        supportedGammaValues:
          type: array
          items:
            type: number
      required:
        - colorSpaces
        - defaultColorSpace
        - supportedGammaValues

    ConvertColorRequest:
      type: object
      properties:
        color:
          $ref: '#/components/schemas/Color'
        fromSpace:
          $ref: '#/components/schemas/ColorSpace'
        toSpace:
          $ref: '#/components/schemas/ColorSpace'
      required:
        - color
        - fromSpace
        - toSpace

    ConvertColorResponse:
      type: object
      properties:
        originalColor:
          $ref: '#/components/schemas/Color'
        convertedColor:
          $ref: '#/components/schemas/Color'
        conversionMatrix:
          $ref: '#/components/schemas/ColorMatrix'
        accuracy:
          type: number
          description: Conversion accuracy (0-1, where 1 is perfect)
      required:
        - originalColor
        - convertedColor

    ColorTransformRequest:
      type: object
      properties:
        sceneId:
          type: string
          description: ID of the scene to transform
        nodeIds:
          type: array
          items:
            type: string
          description: IDs of nodes to apply transformation to
        transformation:
          $ref: '#/components/schemas/ColorTransformParams'
        preview:
          type: boolean
          default: false
          description: Whether this is a preview transformation (non-persistent)
      required:
        - sceneId
        - nodeIds
        - transformation

    ColorTransformResponse:
      type: object
      properties:
        transformationId:
          type: string
          description: Unique ID for this transformation
        affectedNodes:
          type: array
          items:
            type: string
          description: IDs of nodes that were transformed
        renderTimeMs:
          type: number
          description: Time taken to apply transformation
        previewFrame:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
            format:
              type: string
              enum: ['rgba_u8', 'rgba_f32']
            data:
              type: string
              format: binary
              description: Base64-encoded frame data
          description: Preview frame showing the transformation result
      required:
        - transformationId
        - affectedNodes
        - renderTimeMs

    # Effect-related schemas
    EffectType:
      type: string
      enum:
        - gaussian_blur
        - motion_blur
        - radial_blur
        - box_blur
        - brightness_contrast
        - levels
        - curves
        - color_balance
        - hue_saturation
        - color_lookup_table
        - wave
        - ripple
        - displacement
        - lens_distortion
        - chroma_key
        - luma_key
        - difference_key
        - color_difference_key
        - noise
        - fractal_noise
        - gradient
        - solid_color
        - checkerboard
        - echo
        - trails
        - speed_ramp
        - time_displacement
        - cartoon
        - posterize
        - emboss
        - find_edges
        - sharpen
        - track_matte
        - luma_matte
        - stencil_matte

    BlendMode:
      type: string
      enum:
        - normal
        - multiply
        - screen
        - overlay
        - darken
        - lighten
        - color_dodge
        - color_burn
        - hard_light
        - soft_light
        - difference
        - exclusion
        - hue
        - saturation
        - color
        - luminosity
        - add
        - subtract

    GaussianBlurParameters:
      type: object
      properties:
        radius:
          type: number
          minimum: 0.1
          maximum: 100
        sigma:
          type: number
          minimum: 0.1
          maximum: 50
        quality:
          type: string
          enum: [low, medium, high]

    ColorCorrectionParameters:
      type: object
      properties:
        brightness:
          type: number
          minimum: -100
          maximum: 100
        contrast:
          type: number
          minimum: -100
          maximum: 100
        preserveLuminosity:
          type: boolean

    LevelsParameters:
      type: object
      properties:
        inputBlack:
          type: number
          minimum: 0
          maximum: 255
        inputWhite:
          type: number
          minimum: 0
          maximum: 255
        gamma:
          type: number
          minimum: 0.1
          maximum: 10
        outputBlack:
          type: number
          minimum: 0
          maximum: 255
        outputWhite:
          type: number
          minimum: 0
          maximum: 255
        channel:
          type: string
          enum: [rgb, red, green, blue]

    CurvesParameters:
      type: object
      properties:
        redCurve:
          type: array
          items:
            $ref: '#/components/schemas/CurvePoint'
        greenCurve:
          type: array
          items:
            $ref: '#/components/schemas/CurvePoint'
        blueCurve:
          type: array
          items:
            $ref: '#/components/schemas/CurvePoint'
        masterCurve:
          type: array
          items:
            $ref: '#/components/schemas/CurvePoint'

    CurvePoint:
      type: object
      required:
        - time
        - value
      properties:
        time:
          type: number
          minimum: 0
          maximum: 1
        value:
          type: number
        interpolation:
          type: string
          enum: [linear, bezier, hold]
        tangentIn:
          type: number
        tangentOut:
          type: number

    EffectParameters:
      type: object
      properties:
        enabled:
          type: boolean
          default: true
        opacity:
          type: number
          minimum: 0
          maximum: 100
          default: 100
        blendMode:
          $ref: '#/components/schemas/BlendMode'
        mask:
          $ref: '#/components/schemas/MaskReference'
        # Effect-specific parameters will be added based on effect type

    MaskReference:
      type: object
      properties:
        maskLayer:
          type: string
        maskChannel:
          type: string
          enum: [luma, alpha, red, green, blue]
        invert:
          type: boolean
        feather:
          type: number
          minimum: 0
          maximum: 100

    PerformanceSettings:
      type: object
      properties:
        quality:
          type: string
          enum: [low, medium, high]
        maxMemoryMB:
          type: number
          minimum: 1
          maximum: 4096
        adaptiveQuality:
          type: boolean
        cacheEnabled:
          type: boolean
        shaderPrecision:
          type: string
          enum: [fp16, fp32]

    EffectNode:
      type: object
      required:
        - id
        - type
        - parameters
        - enabled
        - blendMode
        - performanceSettings
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/EffectType'
        name:
          type: string
        parameters:
          $ref: '#/components/schemas/EffectParameters'
        enabled:
          type: boolean
        blendMode:
          $ref: '#/components/schemas/BlendMode'
        mask:
          $ref: '#/components/schemas/MaskReference'
        performanceSettings:
          $ref: '#/components/schemas/PerformanceSettings'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
