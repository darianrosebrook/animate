module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: ['eslint:recommended'],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint', 'react-refresh'],
  globals: {
    // WebGPU types
    GPUDevice: 'readonly',
    GPUAdapter: 'readonly',
    GPUCanvasContext: 'readonly',
    GPUTexture: 'readonly',
    GPUBuffer: 'readonly',
    GPURenderPipeline: 'readonly',
    GPUBindGroup: 'readonly',
    GPUBindGroupLayout: 'readonly',
    GPUShaderModule: 'readonly',
    GPURenderPassEncoder: 'readonly',
    GPUCommandEncoder: 'readonly',
    GPUCommandBuffer: 'readonly',
    GPURenderPassDescriptor: 'readonly',
    GPUBufferUsage: 'readonly',
    GPUTextureUsage: 'readonly',
    GPUShaderStage: 'readonly',
    GPUSampler: 'readonly',
    GPUTextureFormat: 'readonly',
    GPUBufferUsageFlags: 'readonly',
    GPUTextureUsageFlags: 'readonly',
    GPUSamplerDescriptor: 'readonly',
    GPUColorTargetState: 'readonly',
    GPUBindGroupLayoutEntry: 'readonly',
    GPUBindGroupEntry: 'readonly',
    GPUBufferDescriptor: 'readonly',
    GPUTextureDescriptor: 'readonly',
    GPUSamplerDescriptor: 'readonly',
    GPUBindGroupLayoutDescriptor: 'readonly',
    GPUPipelineLayoutDescriptor: 'readonly',
    GPURenderPipelineDescriptor: 'readonly',
    GPUComputePipelineDescriptor: 'readonly',
    GPUBindGroupDescriptor: 'readonly',
    GPUCommandEncoderDescriptor: 'readonly',
    GPURenderBundleEncoderDescriptor: 'readonly',
    GPUQuerySetDescriptor: 'readonly',
    GPUErrorFilter: 'readonly',
    GPUQueue: 'readonly',
    GPUQuerySet: 'readonly',
    GPURenderBundle: 'readonly',
    GPURenderBundleEncoder: 'readonly',
    GPUComputePassEncoder: 'readonly',
    GPUComputePassDescriptor: 'readonly',
    GPURenderPassDescriptor: 'readonly',
    GPUTextureView: 'readonly',
    GPUTextureViewDescriptor: 'readonly',
    GPUPipelineLayout: 'readonly',
    GPUComputePipeline: 'readonly',
    GPUMapModeFlags: 'readonly',
    GPUVertexBufferLayout: 'readonly',
    // Web APIs
    VideoDecoder: 'readonly',
    EventListener: 'readonly',
    // Test globals
    describe: 'readonly',
    it: 'readonly',
    expect: 'readonly',
    beforeAll: 'readonly',
    afterAll: 'readonly',
    beforeEach: 'readonly',
    afterEach: 'readonly',
    test: 'readonly',
    vi: 'readonly',
    // Node.js globals
    NodeJS: 'readonly',
  },
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        caughtErrorsIgnorePattern: '^_',
      },
    ],
    'no-unused-vars': 'off', // Turn off base rule as it can conflict with @typescript-eslint/no-unused-vars
    'no-redeclare': 'off', // Turn off base rule to allow interface merging
    'no-undef': 'off', // TypeScript handles this better
    'no-unreachable': 'off', // Turn off unreachable code warnings
    'no-case-declarations': 'off', // Allow declarations in case blocks
    'no-extra-semi': 'error',
    'no-prototype-builtins': 'off', // Turn off prototype builtins warnings
  },
}
